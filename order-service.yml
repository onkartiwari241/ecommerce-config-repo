spring:
  application:
    name: 'order-service'

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: 'org.hibernate.dialect.MySQL8Dialect'

  redis:
    host: 'localhost'
    port: 6379
  cache:
    type: redis
    redis:
      time-to-live: 600000
      cache-null-values: false
      key-prefix: 'orderService:'

server:
  port: 8083

# Eureka configuration
eureka:
  client:
    service-url:
      defaultZone: 'http://localhost:8761/eureka'
    register-with-eureka: true
    fetch-registry: true

# Resilience4j Circuit Breaker Config
resilience4j:
  circuitbreaker:
    instances:
      ORDER-SERVICE:
        registerHealthIndicator: true
        slidingWindowSize: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        minimumNumberOfCalls: 4
        automaticTransitionFromOpenToHalfOpenEnabled: true
  retry:
    instances:
      ORDER-SERVICE:
        maxAttempts: 3
        waitDuration: 2s
  ratelimiter:
    instances:
      ORDER-SERVICE:
        limitForPeriod: 5
        limitRefreshPeriod: 10s
        timeoutDuration: 0

# Distributed tracing and Zipkin
management:
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: 'http://localhost:9411/api/v2/spans'

  # Expose all actuator endpoints
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always

logging:
  pattern:
    level: '%5p [${spring.application.name:}, traceId=%X{traceId:-}, spanId=%X{spanId:-}]'
